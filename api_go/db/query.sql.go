// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const countFindAllAuthorsByCreator = `-- name: CountFindAllAuthorsByCreator :one
SELECT COUNT(*) FROM authors
WHERE user_id_fk = ?
`

func (q *Queries) CountFindAllAuthorsByCreator(ctx context.Context, userIDFk sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFindAllAuthorsByCreator, userIDFk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFindAllAuthorsByCreatorAndSearchText = `-- name: CountFindAllAuthorsByCreatorAndSearchText :one
SELECT COUNT(*)
FROM authors a
WHERE a.user_id_fk = ?
  AND (a.name LIKE CONCAT('%', ?, '%')
    OR a.extra_information LIKE CONCAT('%', ?, '%'))
`

type CountFindAllAuthorsByCreatorAndSearchTextParams struct {
	UserIDFk sql.NullString
	CONCAT   interface{}
	CONCAT_2 interface{}
}

func (q *Queries) CountFindAllAuthorsByCreatorAndSearchText(ctx context.Context, arg CountFindAllAuthorsByCreatorAndSearchTextParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFindAllAuthorsByCreatorAndSearchText, arg.UserIDFk, arg.CONCAT, arg.CONCAT_2)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFindAllNotesByCreator = `-- name: CountFindAllNotesByCreator :one
SELECT COUNT(*) FROM elements as note WHERE note.type ='note' AND note.user_id_fk = ?
`

func (q *Queries) CountFindAllNotesByCreator(ctx context.Context, userIDFk sql.NullString) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFindAllNotesByCreator, userIDFk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countFindAllNotesByCreatorWithSearch = `-- name: CountFindAllNotesByCreatorWithSearch :one
SELECT COUNT(*) FROM elements as note WHERE note.type ='note' and note.name LIKE CONCAT('%',?,'%') AND note.user_id_fk = ?
`

type CountFindAllNotesByCreatorWithSearchParams struct {
	CONCAT   interface{}
	UserIDFk sql.NullString
}

func (q *Queries) CountFindAllNotesByCreatorWithSearch(ctx context.Context, arg CountFindAllNotesByCreatorWithSearchParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countFindAllNotesByCreatorWithSearch, arg.CONCAT, arg.UserIDFk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countSearchByFolderName = `-- name: CountSearchByFolderName :one
SELECT COUNT(*) FROM elements WHERE name LIKE CONCAT('%', ?, '%') and type = 'folder' AND user_id_fk = ?
`

type CountSearchByFolderNameParams struct {
	CONCAT   interface{}
	UserIDFk sql.NullString
}

func (q *Queries) CountSearchByFolderName(ctx context.Context, arg CountSearchByFolderNameParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countSearchByFolderName, arg.CONCAT, arg.UserIDFk)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createAuthor = `-- name: CreateAuthor :execlastid
INSERT INTO authors (id, name, extra_information, user_id_fk) VALUES (?, ?, ?, ?)
`

type CreateAuthorParams struct {
	ID               string
	Name             sql.NullString
	ExtraInformation sql.NullString
	UserIDFk         sql.NullString
}

func (q *Queries) CreateAuthor(ctx context.Context, arg CreateAuthorParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createAuthor,
		arg.ID,
		arg.Name,
		arg.ExtraInformation,
		arg.UserIDFk,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createConcert = `-- name: CreateConcert :execlastid
INSERT INTO concert (id, title, description, location, due_date, hints, user_id_fk) VALUES (?, ?, ?, ?, ?, ?, ?)
`

type CreateConcertParams struct {
	ID          string
	Title       sql.NullString
	Description sql.NullString
	Location    sql.NullString
	DueDate     sql.NullTime
	Hints       sql.NullString
	UserIDFk    sql.NullString
}

func (q *Queries) CreateConcert(ctx context.Context, arg CreateConcertParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createConcert,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Location,
		arg.DueDate,
		arg.Hints,
		arg.UserIDFk,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createEvent = `-- name: CreateEvent :exec
REPLACE INTO events (
    uid,
    user_id_fk,
    summary,
    url,
    geo_date_x,
    geo_date_y,
    location,
    tz_id,
    description,
    start_date,
    end_date
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type CreateEventParams struct {
	Uid         string
	UserIDFk    string
	Summary     sql.NullString
	Url         sql.NullString
	GeoDateX    sql.NullFloat64
	GeoDateY    sql.NullFloat64
	Location    sql.NullString
	TzID        sql.NullString
	Description sql.NullString
	StartDate   sql.NullTime
	EndDate     sql.NullTime
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) error {
	_, err := q.db.ExecContext(ctx, createEvent,
		arg.Uid,
		arg.UserIDFk,
		arg.Summary,
		arg.Url,
		arg.GeoDateX,
		arg.GeoDateY,
		arg.Location,
		arg.TzID,
		arg.Description,
		arg.StartDate,
		arg.EndDate,
	)
	return err
}

const createFolder = `-- name: CreateFolder :execlastid
INSERT INTO elements (id, type, name, description, user_id_fk, parent) VALUES (?,'folder', ?, ?, ?, ?)
`

type CreateFolderParams struct {
	ID          string
	Name        sql.NullString
	Description sql.NullString
	UserIDFk    sql.NullString
	Parent      sql.NullString
}

func (q *Queries) CreateFolder(ctx context.Context, arg CreateFolderParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createFolder,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserIDFk,
		arg.Parent,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createIcalSync = `-- name: CreateIcalSync :execlastid
INSERT INTO ical_sync (id, user_id_fk, ical_url, type, last_synced) VALUES (?, ?, ?, ?, ?)
`

type CreateIcalSyncParams struct {
	ID         string
	UserIDFk   string
	IcalUrl    string
	Type       string
	LastSynced sql.NullTime
}

func (q *Queries) CreateIcalSync(ctx context.Context, arg CreateIcalSyncParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createIcalSync,
		arg.ID,
		arg.UserIDFk,
		arg.IcalUrl,
		arg.Type,
		arg.LastSynced,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createNote = `-- name: CreateNote :execlastid
INSERT INTO elements (id, type, name, description, user_id_fk, parent, author_id_fk, number_of_pages) VALUES (?,'note', ?, ?, ?, ?, ?, ?)
`

type CreateNoteParams struct {
	ID            string
	Name          sql.NullString
	Description   sql.NullString
	UserIDFk      sql.NullString
	Parent        sql.NullString
	AuthorIDFk    sql.NullString
	NumberOfPages sql.NullInt32
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createNote,
		arg.ID,
		arg.Name,
		arg.Description,
		arg.UserIDFk,
		arg.Parent,
		arg.AuthorIDFk,
		arg.NumberOfPages,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const createUser = `-- name: CreateUser :execlastid
INSERT INTO user (id, username, side_bar_collapsed, firstname, lastname ) VALUES (?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID               string
	Username         sql.NullString
	SideBarCollapsed bool
	Firstname        sql.NullString
	Lastname         sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.Username,
		arg.SideBarCollapsed,
		arg.Firstname,
		arg.Lastname,
	)
	if err != nil {
		return 0, err
	}
	return result.LastInsertId()
}

const deleteAllAuthors = `-- name: DeleteAllAuthors :exec
TRUNCATE authors
`

func (q *Queries) DeleteAllAuthors(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllAuthors)
	return err
}

const deleteAllConcerts = `-- name: DeleteAllConcerts :exec
TRUNCATE concert
`

func (q *Queries) DeleteAllConcerts(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllConcerts)
	return err
}

const deleteAllElements = `-- name: DeleteAllElements :exec
TRUNCATE elements
`

func (q *Queries) DeleteAllElements(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllElements)
	return err
}

const deleteAllUser = `-- name: DeleteAllUser :exec
DELETE FROM user
`

func (q *Queries) DeleteAllUser(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUser)
	return err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
TRUNCATE user
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const deleteAuthor = `-- name: DeleteAuthor :exec
DELETE FROM authors WHERE id = ? AND user_id_fk = ?
`

type DeleteAuthorParams struct {
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) DeleteAuthor(ctx context.Context, arg DeleteAuthorParams) error {
	_, err := q.db.ExecContext(ctx, deleteAuthor, arg.ID, arg.UserIDFk)
	return err
}

const deleteConcert = `-- name: DeleteConcert :exec
DELETE FROM concert WHERE id = ?
`

func (q *Queries) DeleteConcert(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteConcert, id)
	return err
}

const deleteNote = `-- name: DeleteNote :exec
DELETE FROM elements WHERE id = ? AND user_id_fk = ?
`

type DeleteNoteParams struct {
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) DeleteNote(ctx context.Context, arg DeleteNoteParams) error {
	_, err := q.db.ExecContext(ctx, deleteNote, arg.ID, arg.UserIDFk)
	return err
}

const deleteNoteInConcert = `-- name: DeleteNoteInConcert :exec
DELETE FROM note_in_concert WHERE concert_id_fk = ? AND note_id_fk = ?
`

type DeleteNoteInConcertParams struct {
	ConcertIDFk string
	NoteIDFk    string
}

func (q *Queries) DeleteNoteInConcert(ctx context.Context, arg DeleteNoteInConcertParams) error {
	_, err := q.db.ExecContext(ctx, deleteNoteInConcert, arg.ConcertIDFk, arg.NoteIDFk)
	return err
}

const deleteNotesInConcert = `-- name: DeleteNotesInConcert :exec
DELETE FROM note_in_concert WHERE concert_id_fk = ?
`

func (q *Queries) DeleteNotesInConcert(ctx context.Context, concertIDFk string) error {
	_, err := q.db.ExecContext(ctx, deleteNotesInConcert, concertIDFk)
	return err
}

const deleteNotesInConcertByNoteId = `-- name: DeleteNotesInConcertByNoteId :exec
DELETE FROM note_in_concert WHERE note_id_fk = ?
`

func (q *Queries) DeleteNotesInConcertByNoteId(ctx context.Context, noteIDFk string) error {
	_, err := q.db.ExecContext(ctx, deleteNotesInConcertByNoteId, noteIDFk)
	return err
}

const deleteProfilePicture = `-- name: DeleteProfilePicture :exec
UPDATE user SET profile_picture = NULL WHERE id = ?
`

func (q *Queries) DeleteProfilePicture(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteProfilePicture, id)
	return err
}

const findAllAuthorsByCreator = `-- name: FindAllAuthorsByCreator :many
SELECT id, extra_information, name, user_id_fk FROM authors
WHERE user_id_fk = ? ORDER BY name LIMIT ? OFFSET ?
`

type FindAllAuthorsByCreatorParams struct {
	UserIDFk sql.NullString
	Limit    int32
	Offset   int32
}

func (q *Queries) FindAllAuthorsByCreator(ctx context.Context, arg FindAllAuthorsByCreatorParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, findAllAuthorsByCreator, arg.UserIDFk, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.ExtraInformation,
			&i.Name,
			&i.UserIDFk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllAuthorsByCreatorAndSearchText = `-- name: FindAllAuthorsByCreatorAndSearchText :many
SELECT a.id, a.extra_information, a.name, a.user_id_fk
FROM authors a
WHERE a.user_id_fk = ?
  AND (a.name LIKE CONCAT('%', ?, '%')
    OR a.extra_information LIKE CONCAT('%', ?, '%'))
`

type FindAllAuthorsByCreatorAndSearchTextParams struct {
	UserIDFk sql.NullString
	CONCAT   interface{}
	CONCAT_2 interface{}
}

func (q *Queries) FindAllAuthorsByCreatorAndSearchText(ctx context.Context, arg FindAllAuthorsByCreatorAndSearchTextParams) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, findAllAuthorsByCreatorAndSearchText, arg.UserIDFk, arg.CONCAT, arg.CONCAT_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.ExtraInformation,
			&i.Name,
			&i.UserIDFk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllAuthorsByCreatorUnpaged = `-- name: FindAllAuthorsByCreatorUnpaged :many
SELECT id, extra_information, name, user_id_fk FROM authors WHERE user_id_fk = ? ORDER BY name
`

func (q *Queries) FindAllAuthorsByCreatorUnpaged(ctx context.Context, userIDFk sql.NullString) ([]Author, error) {
	rows, err := q.db.QueryContext(ctx, findAllAuthorsByCreatorUnpaged, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Author
	for rows.Next() {
		var i Author
		if err := rows.Scan(
			&i.ID,
			&i.ExtraInformation,
			&i.Name,
			&i.UserIDFk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllFoldersByCreator = `-- name: FindAllFoldersByCreator :many
SELECT type, id, creation_date, description, name, number_of_pages, user_id_fk, parent, author_id_fk, pdf_content FROM elements as folders WHERE type ='folder' AND user_id_fk = ? ORDER BY name
`

// type: Folder
func (q *Queries) FindAllFoldersByCreator(ctx context.Context, userIDFk sql.NullString) ([]Element, error) {
	rows, err := q.db.QueryContext(ctx, findAllFoldersByCreator, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Element
	for rows.Next() {
		var i Element
		if err := rows.Scan(
			&i.Type,
			&i.ID,
			&i.CreationDate,
			&i.Description,
			&i.Name,
			&i.NumberOfPages,
			&i.UserIDFk,
			&i.Parent,
			&i.AuthorIDFk,
			&i.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllIcalSyncsByUser = `-- name: FindAllIcalSyncsByUser :many
SELECT id, user_id_fk, ical_url, type, last_synced FROM ical_sync WHERE user_id_fk = ? ORDER BY ical_url
`

func (q *Queries) FindAllIcalSyncsByUser(ctx context.Context, userIDFk string) ([]IcalSync, error) {
	rows, err := q.db.QueryContext(ctx, findAllIcalSyncsByUser, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []IcalSync
	for rows.Next() {
		var i IcalSync
		if err := rows.Scan(
			&i.ID,
			&i.UserIDFk,
			&i.IcalUrl,
			&i.Type,
			&i.LastSynced,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllMembersOfClub = `-- name: FindAllMembersOfClub :many
SELECT clubs.id, clubs.name, clubs.address_id, club_participant.user_id, club_participant.club_id, club_participant.role from clubs join club_participant ON club_participant.club_id = clubs.id join user on user.id = club_participant.user_id  WHERE clubs.id = ?
`

type FindAllMembersOfClubRow struct {
	Club            Club
	ClubParticipant ClubParticipant
}

func (q *Queries) FindAllMembersOfClub(ctx context.Context, id string) ([]FindAllMembersOfClubRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllMembersOfClub, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllMembersOfClubRow
	for rows.Next() {
		var i FindAllMembersOfClubRow
		if err := rows.Scan(
			&i.Club.ID,
			&i.Club.Name,
			&i.Club.AddressID,
			&i.ClubParticipant.UserID,
			&i.ClubParticipant.ClubID,
			&i.ClubParticipant.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesByAuthor = `-- name: FindAllNotesByAuthor :many
SELECT type, id, creation_date, description, name, number_of_pages, user_id_fk, parent, author_id_fk, pdf_content FROM elements WHERE type ='note' AND author_id_fk = ? AND user_id_fk = ? ORDER BY name
`

type FindAllNotesByAuthorParams struct {
	AuthorIDFk sql.NullString
	UserIDFk   sql.NullString
}

func (q *Queries) FindAllNotesByAuthor(ctx context.Context, arg FindAllNotesByAuthorParams) ([]Element, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesByAuthor, arg.AuthorIDFk, arg.UserIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Element
	for rows.Next() {
		var i Element
		if err := rows.Scan(
			&i.Type,
			&i.ID,
			&i.CreationDate,
			&i.Description,
			&i.Name,
			&i.NumberOfPages,
			&i.UserIDFk,
			&i.Parent,
			&i.AuthorIDFk,
			&i.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesByCreator = `-- name: FindAllNotesByCreator :many
SELECT note.type, note.id, note.creation_date, note.description, note.name, note.number_of_pages, note.user_id_fk, note.parent, note.author_id_fk, note.pdf_content, a.id, a.extra_information, a.name, a.user_id_fk, p.type, p.id, p.creation_date, p.description, p.name, p.number_of_pages, p.user_id_fk, p.parent, p.author_id_fk, p.pdf_content FROM elements as note JOIN authors a on a.id = elements.author_id_fk JOIN elements p ON p.id = elements.parent  WHERE elements.type ='note' AND a.user_id_fk = ? ORDER BY note.name
`

type FindAllNotesByCreatorRow struct {
	Element   Element
	Author    Author
	Element_2 Element
}

func (q *Queries) FindAllNotesByCreator(ctx context.Context, userIDFk sql.NullString) ([]FindAllNotesByCreatorRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesByCreator, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllNotesByCreatorRow
	for rows.Next() {
		var i FindAllNotesByCreatorRow
		if err := rows.Scan(
			&i.Element.Type,
			&i.Element.ID,
			&i.Element.CreationDate,
			&i.Element.Description,
			&i.Element.Name,
			&i.Element.NumberOfPages,
			&i.Element.UserIDFk,
			&i.Element.Parent,
			&i.Element.AuthorIDFk,
			&i.Element.PdfContent,
			&i.Author.ID,
			&i.Author.ExtraInformation,
			&i.Author.Name,
			&i.Author.UserIDFk,
			&i.Element_2.Type,
			&i.Element_2.ID,
			&i.Element_2.CreationDate,
			&i.Element_2.Description,
			&i.Element_2.Name,
			&i.Element_2.NumberOfPages,
			&i.Element_2.UserIDFk,
			&i.Element_2.Parent,
			&i.Element_2.AuthorIDFk,
			&i.Element_2.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesByCreatorPaged = `-- name: FindAllNotesByCreatorPaged :many
SELECT note.type, note.id, note.creation_date, note.description, note.name, note.number_of_pages, note.user_id_fk, note.parent, note.author_id_fk, note.pdf_content, a.id, a.extra_information, a.name, a.user_id_fk, p.type, p.id, p.creation_date, p.description, p.name, p.number_of_pages, p.user_id_fk, p.parent, p.author_id_fk, p.pdf_content FROM elements as note JOIN authors a on a.id = note.author_id_fk JOIN elements p ON p.id = note.parent WHERE note.type ='note' AND a.user_id_fk = ? ORDER BY note.name LIMIT ? OFFSET ?
`

type FindAllNotesByCreatorPagedParams struct {
	UserIDFk sql.NullString
	Limit    int32
	Offset   int32
}

type FindAllNotesByCreatorPagedRow struct {
	Element   Element
	Author    Author
	Element_2 Element
}

func (q *Queries) FindAllNotesByCreatorPaged(ctx context.Context, arg FindAllNotesByCreatorPagedParams) ([]FindAllNotesByCreatorPagedRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesByCreatorPaged, arg.UserIDFk, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllNotesByCreatorPagedRow
	for rows.Next() {
		var i FindAllNotesByCreatorPagedRow
		if err := rows.Scan(
			&i.Element.Type,
			&i.Element.ID,
			&i.Element.CreationDate,
			&i.Element.Description,
			&i.Element.Name,
			&i.Element.NumberOfPages,
			&i.Element.UserIDFk,
			&i.Element.Parent,
			&i.Element.AuthorIDFk,
			&i.Element.PdfContent,
			&i.Author.ID,
			&i.Author.ExtraInformation,
			&i.Author.Name,
			&i.Author.UserIDFk,
			&i.Element_2.Type,
			&i.Element_2.ID,
			&i.Element_2.CreationDate,
			&i.Element_2.Description,
			&i.Element_2.Name,
			&i.Element_2.NumberOfPages,
			&i.Element_2.UserIDFk,
			&i.Element_2.Parent,
			&i.Element_2.AuthorIDFk,
			&i.Element_2.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesByCreatorPagedWithSearch = `-- name: FindAllNotesByCreatorPagedWithSearch :many
SELECT note.type, note.id, note.creation_date, note.description, note.name, note.number_of_pages, note.user_id_fk, note.parent, note.author_id_fk, note.pdf_content, a.id, a.extra_information, a.name, a.user_id_fk, p.type, p.id, p.creation_date, p.description, p.name, p.number_of_pages, p.user_id_fk, p.parent, p.author_id_fk, p.pdf_content FROM elements as note JOIN authors a on a.id = note.author_id_fk JOIN elements p ON p.id = note.parent WHERE note.type ='note' and note.name LIKE CONCAT('%',?,'%') AND a.user_id_fk = ? ORDER BY note.name LIMIT ? OFFSET ?
`

type FindAllNotesByCreatorPagedWithSearchParams struct {
	CONCAT   interface{}
	UserIDFk sql.NullString
	Limit    int32
	Offset   int32
}

type FindAllNotesByCreatorPagedWithSearchRow struct {
	Element   Element
	Author    Author
	Element_2 Element
}

func (q *Queries) FindAllNotesByCreatorPagedWithSearch(ctx context.Context, arg FindAllNotesByCreatorPagedWithSearchParams) ([]FindAllNotesByCreatorPagedWithSearchRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesByCreatorPagedWithSearch,
		arg.CONCAT,
		arg.UserIDFk,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllNotesByCreatorPagedWithSearchRow
	for rows.Next() {
		var i FindAllNotesByCreatorPagedWithSearchRow
		if err := rows.Scan(
			&i.Element.Type,
			&i.Element.ID,
			&i.Element.CreationDate,
			&i.Element.Description,
			&i.Element.Name,
			&i.Element.NumberOfPages,
			&i.Element.UserIDFk,
			&i.Element.Parent,
			&i.Element.AuthorIDFk,
			&i.Element.PdfContent,
			&i.Author.ID,
			&i.Author.ExtraInformation,
			&i.Author.Name,
			&i.Author.UserIDFk,
			&i.Element_2.Type,
			&i.Element_2.ID,
			&i.Element_2.CreationDate,
			&i.Element_2.Description,
			&i.Element_2.Name,
			&i.Element_2.NumberOfPages,
			&i.Element_2.UserIDFk,
			&i.Element_2.Parent,
			&i.Element_2.AuthorIDFk,
			&i.Element_2.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesByCreatorWithSearch = `-- name: FindAllNotesByCreatorWithSearch :many
SELECT note.type, note.id, note.creation_date, note.description, note.name, note.number_of_pages, note.user_id_fk, note.parent, note.author_id_fk, note.pdf_content, a.id, a.extra_information, a.name, a.user_id_fk, p.type, p.id, p.creation_date, p.description, p.name, p.number_of_pages, p.user_id_fk, p.parent, p.author_id_fk, p.pdf_content FROM elements as note JOIN authors a on a.id = elements.author_id_fk JOIN elements p ON p.id = elements.parent  WHERE elements.type ='note' and note.name LIKE CONCAT('%',?,'%') AND a.user_id_fk = ? ORDER BY note.name
`

type FindAllNotesByCreatorWithSearchParams struct {
	CONCAT   interface{}
	UserIDFk sql.NullString
}

type FindAllNotesByCreatorWithSearchRow struct {
	Element   Element
	Author    Author
	Element_2 Element
}

func (q *Queries) FindAllNotesByCreatorWithSearch(ctx context.Context, arg FindAllNotesByCreatorWithSearchParams) ([]FindAllNotesByCreatorWithSearchRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesByCreatorWithSearch, arg.CONCAT, arg.UserIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllNotesByCreatorWithSearchRow
	for rows.Next() {
		var i FindAllNotesByCreatorWithSearchRow
		if err := rows.Scan(
			&i.Element.Type,
			&i.Element.ID,
			&i.Element.CreationDate,
			&i.Element.Description,
			&i.Element.Name,
			&i.Element.NumberOfPages,
			&i.Element.UserIDFk,
			&i.Element.Parent,
			&i.Element.AuthorIDFk,
			&i.Element.PdfContent,
			&i.Author.ID,
			&i.Author.ExtraInformation,
			&i.Author.Name,
			&i.Author.UserIDFk,
			&i.Element_2.Type,
			&i.Element_2.ID,
			&i.Element_2.CreationDate,
			&i.Element_2.Description,
			&i.Element_2.Name,
			&i.Element_2.NumberOfPages,
			&i.Element_2.UserIDFk,
			&i.Element_2.Parent,
			&i.Element_2.AuthorIDFk,
			&i.Element_2.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllNotesInConcertByPlace = `-- name: FindAllNotesInConcertByPlace :many
SELECT concert_id_fk, note_id_fk, place_in_concert FROM note_in_concert WHERE concert_id_fk = ? ORDER BY place_in_concert
`

func (q *Queries) FindAllNotesInConcertByPlace(ctx context.Context, concertIDFk string) ([]NoteInConcert, error) {
	rows, err := q.db.QueryContext(ctx, findAllNotesInConcertByPlace, concertIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []NoteInConcert
	for rows.Next() {
		var i NoteInConcert
		if err := rows.Scan(&i.ConcertIDFk, &i.NoteIDFk, &i.PlaceInConcert); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllParentFolders = `-- name: FindAllParentFolders :many
SELECT type, id, creation_date, description, name, number_of_pages, user_id_fk, parent, author_id_fk, pdf_content FROM elements WHERE parent IS NULL AND type = 'folder' AND user_id_fk = ? ORDER BY name
`

func (q *Queries) FindAllParentFolders(ctx context.Context, userIDFk sql.NullString) ([]Element, error) {
	rows, err := q.db.QueryContext(ctx, findAllParentFolders, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Element
	for rows.Next() {
		var i Element
		if err := rows.Scan(
			&i.Type,
			&i.ID,
			&i.CreationDate,
			&i.Description,
			&i.Name,
			&i.NumberOfPages,
			&i.UserIDFk,
			&i.Parent,
			&i.AuthorIDFk,
			&i.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAllSubElements = `-- name: FindAllSubElements :many
SELECT elements.type, elements.id, elements.creation_date, elements.description, elements.name, elements.number_of_pages, elements.user_id_fk, elements.parent, elements.author_id_fk, elements.pdf_content, authors.id, authors.extra_information, authors.name, authors.user_id_fk FROM elements LEFT JOIN authors ON elements.author_id_fk = authors.id WHERE parent = ? AND elements.user_id_fk = ? ORDER BY elements.name
`

type FindAllSubElementsParams struct {
	Parent   sql.NullString
	UserIDFk sql.NullString
}

type FindAllSubElementsRow struct {
	Element          Element
	ID               sql.NullString
	ExtraInformation sql.NullString
	Name             sql.NullString
	UserIDFk         sql.NullString
}

func (q *Queries) FindAllSubElements(ctx context.Context, arg FindAllSubElementsParams) ([]FindAllSubElementsRow, error) {
	rows, err := q.db.QueryContext(ctx, findAllSubElements, arg.Parent, arg.UserIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindAllSubElementsRow
	for rows.Next() {
		var i FindAllSubElementsRow
		if err := rows.Scan(
			&i.Element.Type,
			&i.Element.ID,
			&i.Element.CreationDate,
			&i.Element.Description,
			&i.Element.Name,
			&i.Element.NumberOfPages,
			&i.Element.UserIDFk,
			&i.Element.Parent,
			&i.Element.AuthorIDFk,
			&i.Element.PdfContent,
			&i.ID,
			&i.ExtraInformation,
			&i.Name,
			&i.UserIDFk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAuthorById = `-- name: FindAuthorById :one
SELECT id, extra_information, name, user_id_fk FROM authors WHERE id = ? and user_id_fk = ?
`

type FindAuthorByIdParams struct {
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) FindAuthorById(ctx context.Context, arg FindAuthorByIdParams) (Author, error) {
	row := q.db.QueryRowContext(ctx, findAuthorById, arg.ID, arg.UserIDFk)
	var i Author
	err := row.Scan(
		&i.ID,
		&i.ExtraInformation,
		&i.Name,
		&i.UserIDFk,
	)
	return i, err
}

const findClubByName = `-- name: FindClubByName :many
SELECT clubs.id, clubs.name, clubs.address_id, address.id, address.street, address.house_number, address.location, address.postal_code, address.country, club_participant.user_id, club_participant.club_id, club_participant.role from clubs join address ON clubs.address_id = address.id join club_participant ON club_participant.club_id = clubs.id  WHERE club_participant.user_id = ?
`

type FindClubByNameRow struct {
	Club            Club
	Address         Address
	ClubParticipant ClubParticipant
}

func (q *Queries) FindClubByName(ctx context.Context, userID string) ([]FindClubByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, findClubByName, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindClubByNameRow
	for rows.Next() {
		var i FindClubByNameRow
		if err := rows.Scan(
			&i.Club.ID,
			&i.Club.Name,
			&i.Club.AddressID,
			&i.Address.ID,
			&i.Address.Street,
			&i.Address.HouseNumber,
			&i.Address.Location,
			&i.Address.PostalCode,
			&i.Address.Country,
			&i.ClubParticipant.UserID,
			&i.ClubParticipant.ClubID,
			&i.ClubParticipant.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findConcertById = `-- name: FindConcertById :one
SELECT id, description, due_date, hints, location, title, user_id_fk FROM concert WHERE id = ?
`

func (q *Queries) FindConcertById(ctx context.Context, id string) (Concert, error) {
	row := q.db.QueryRowContext(ctx, findConcertById, id)
	var i Concert
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.DueDate,
		&i.Hints,
		&i.Location,
		&i.Title,
		&i.UserIDFk,
	)
	return i, err
}

const findConcertByIdAndUser = `-- name: FindConcertByIdAndUser :one
SELECT id, description, due_date, hints, location, title, user_id_fk FROM concert WHERE id = ? AND user_id_fk = ?
`

type FindConcertByIdAndUserParams struct {
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) FindConcertByIdAndUser(ctx context.Context, arg FindConcertByIdAndUserParams) (Concert, error) {
	row := q.db.QueryRowContext(ctx, findConcertByIdAndUser, arg.ID, arg.UserIDFk)
	var i Concert
	err := row.Scan(
		&i.ID,
		&i.Description,
		&i.DueDate,
		&i.Hints,
		&i.Location,
		&i.Title,
		&i.UserIDFk,
	)
	return i, err
}

const findConcertsOfUserSortedByDate = `-- name: FindConcertsOfUserSortedByDate :many
SELECT id, description, due_date, hints, location, title, user_id_fk FROM concert WHERE user_id_fk = ? ORDER BY due_date DESC
`

func (q *Queries) FindConcertsOfUserSortedByDate(ctx context.Context, userIDFk sql.NullString) ([]Concert, error) {
	rows, err := q.db.QueryContext(ctx, findConcertsOfUserSortedByDate, userIDFk)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Concert
	for rows.Next() {
		var i Concert
		if err := rows.Scan(
			&i.ID,
			&i.Description,
			&i.DueDate,
			&i.Hints,
			&i.Location,
			&i.Title,
			&i.UserIDFk,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findFolderById = `-- name: FindFolderById :one
SELECT type, id, creation_date, description, name, number_of_pages, user_id_fk, parent, author_id_fk, pdf_content FROM elements WHERE id = ? and user_id_fk = ?
`

type FindFolderByIdParams struct {
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) FindFolderById(ctx context.Context, arg FindFolderByIdParams) (Element, error) {
	row := q.db.QueryRowContext(ctx, findFolderById, arg.ID, arg.UserIDFk)
	var i Element
	err := row.Scan(
		&i.Type,
		&i.ID,
		&i.CreationDate,
		&i.Description,
		&i.Name,
		&i.NumberOfPages,
		&i.UserIDFk,
		&i.Parent,
		&i.AuthorIDFk,
		&i.PdfContent,
	)
	return i, err
}

const findIcalSyncById = `-- name: FindIcalSyncById :one
SELECT id, user_id_fk, ical_url, type, last_synced FROM ical_sync WHERE id = ? AND user_id_fk = ?
`

type FindIcalSyncByIdParams struct {
	ID       string
	UserIDFk string
}

func (q *Queries) FindIcalSyncById(ctx context.Context, arg FindIcalSyncByIdParams) (IcalSync, error) {
	row := q.db.QueryRowContext(ctx, findIcalSyncById, arg.ID, arg.UserIDFk)
	var i IcalSync
	err := row.Scan(
		&i.ID,
		&i.UserIDFk,
		&i.IcalUrl,
		&i.Type,
		&i.LastSynced,
	)
	return i, err
}

const findIcalSyncByTypeAndUser = `-- name: FindIcalSyncByTypeAndUser :one
SELECT id, user_id_fk, ical_url, type, last_synced FROM ical_sync WHERE type = ? AND user_id_fk = ?
`

type FindIcalSyncByTypeAndUserParams struct {
	Type     string
	UserIDFk string
}

func (q *Queries) FindIcalSyncByTypeAndUser(ctx context.Context, arg FindIcalSyncByTypeAndUserParams) (IcalSync, error) {
	row := q.db.QueryRowContext(ctx, findIcalSyncByTypeAndUser, arg.Type, arg.UserIDFk)
	var i IcalSync
	err := row.Scan(
		&i.ID,
		&i.UserIDFk,
		&i.IcalUrl,
		&i.Type,
		&i.LastSynced,
	)
	return i, err
}

const findIcalSyncWithUserSinceDate = `-- name: FindIcalSyncWithUserSinceDate :many
SELECT ical_sync.id, ical_sync.user_id_fk, ical_sync.ical_url, ical_sync.type, ical_sync.last_synced, user.id, user.side_bar_collapsed, user.username, user.profile_picture, user.email, user.firstname, user.lastname, user.telephonenumber, user.birthday, user.country, user.postalcode, user.city, user.street FROM ical_sync JOIN user ON ical_sync.user_id_fk = user.id WHERE ical_sync.last_synced > ? or ical_sync.last_synced IS NULL
`

type FindIcalSyncWithUserSinceDateRow struct {
	IcalSync IcalSync
	User     User
}

func (q *Queries) FindIcalSyncWithUserSinceDate(ctx context.Context, lastSynced sql.NullTime) ([]FindIcalSyncWithUserSinceDateRow, error) {
	rows, err := q.db.QueryContext(ctx, findIcalSyncWithUserSinceDate, lastSynced)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FindIcalSyncWithUserSinceDateRow
	for rows.Next() {
		var i FindIcalSyncWithUserSinceDateRow
		if err := rows.Scan(
			&i.IcalSync.ID,
			&i.IcalSync.UserIDFk,
			&i.IcalSync.IcalUrl,
			&i.IcalSync.Type,
			&i.IcalSync.LastSynced,
			&i.User.ID,
			&i.User.SideBarCollapsed,
			&i.User.Username,
			&i.User.ProfilePicture,
			&i.User.Email,
			&i.User.Firstname,
			&i.User.Lastname,
			&i.User.Telephonenumber,
			&i.User.Birthday,
			&i.User.Country,
			&i.User.Postalcode,
			&i.User.City,
			&i.User.Street,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findNoteById = `-- name: FindNoteById :one
SELECT note.type, note.id, note.creation_date, note.description, note.name, note.number_of_pages, note.user_id_fk, note.parent, note.author_id_fk, note.pdf_content,folder.type, folder.id, folder.creation_date, folder.description, folder.name, folder.number_of_pages, folder.user_id_fk, folder.parent, folder.author_id_fk, folder.pdf_content FROM elements note join elements folder ON note.parent = folder.id  WHERE note.type ='note' AND note.id = ?
`

type FindNoteByIdRow struct {
	Element   Element
	Element_2 Element
}

// type: Note
func (q *Queries) FindNoteById(ctx context.Context, id string) (FindNoteByIdRow, error) {
	row := q.db.QueryRowContext(ctx, findNoteById, id)
	var i FindNoteByIdRow
	err := row.Scan(
		&i.Element.Type,
		&i.Element.ID,
		&i.Element.CreationDate,
		&i.Element.Description,
		&i.Element.Name,
		&i.Element.NumberOfPages,
		&i.Element.UserIDFk,
		&i.Element.Parent,
		&i.Element.AuthorIDFk,
		&i.Element.PdfContent,
		&i.Element_2.Type,
		&i.Element_2.ID,
		&i.Element_2.CreationDate,
		&i.Element_2.Description,
		&i.Element_2.Name,
		&i.Element_2.NumberOfPages,
		&i.Element_2.UserIDFk,
		&i.Element_2.Parent,
		&i.Element_2.AuthorIDFk,
		&i.Element_2.PdfContent,
	)
	return i, err
}

const findUserById = `-- name: FindUserById :one
SELECT id, side_bar_collapsed, username, profile_picture, email, firstname, lastname, telephonenumber, birthday, country, postalcode, city, street FROM user WHERE id = ?
`

func (q *Queries) FindUserById(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, findUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.SideBarCollapsed,
		&i.Username,
		&i.ProfilePicture,
		&i.Email,
		&i.Firstname,
		&i.Lastname,
		&i.Telephonenumber,
		&i.Birthday,
		&i.Country,
		&i.Postalcode,
		&i.City,
		&i.Street,
	)
	return i, err
}

const getClubs = `-- name: GetClubs :many
SELECT clubs.id, clubs.name, clubs.address_id, address.id, address.street, address.house_number, address.location, address.postal_code, address.country from clubs join address ON clubs.address_id = address.id WHERE clubs.id = ?
`

type GetClubsRow struct {
	Club    Club
	Address Address
}

func (q *Queries) GetClubs(ctx context.Context, id string) ([]GetClubsRow, error) {
	rows, err := q.db.QueryContext(ctx, getClubs, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClubsRow
	for rows.Next() {
		var i GetClubsRow
		if err := rows.Scan(
			&i.Club.ID,
			&i.Club.Name,
			&i.Club.AddressID,
			&i.Address.ID,
			&i.Address.Street,
			&i.Address.HouseNumber,
			&i.Address.Location,
			&i.Address.PostalCode,
			&i.Address.Country,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getEventsOfUser = `-- name: GetEventsOfUser :many
SELECT uid, user_id_fk, summary, url, geo_date_x, geo_date_y, location, tz_id, description, start_date, end_date FROM events WHERE user_id_fk = ? AND start_date > ?  ORDER BY start_date
`

type GetEventsOfUserParams struct {
	UserIDFk  string
	StartDate sql.NullTime
}

func (q *Queries) GetEventsOfUser(ctx context.Context, arg GetEventsOfUserParams) ([]Event, error) {
	rows, err := q.db.QueryContext(ctx, getEventsOfUser, arg.UserIDFk, arg.StartDate)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Event
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.Uid,
			&i.UserIDFk,
			&i.Summary,
			&i.Url,
			&i.GeoDateX,
			&i.GeoDateY,
			&i.Location,
			&i.TzID,
			&i.Description,
			&i.StartDate,
			&i.EndDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getIndexAuthorsOnPage = `-- name: GetIndexAuthorsOnPage :many
SELECT COUNT(*) FROM authors a WHERE a.name<? ORDER BY a.name,a.id
`

func (q *Queries) GetIndexAuthorsOnPage(ctx context.Context, name sql.NullString) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getIndexAuthorsOnPage, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []int64
	for rows.Next() {
		var count int64
		if err := rows.Scan(&count); err != nil {
			return nil, err
		}
		items = append(items, count)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const healthCheck = `-- name: HealthCheck :one
SELECT 1
`

func (q *Queries) HealthCheck(ctx context.Context) (int32, error) {
	row := q.db.QueryRowContext(ctx, healthCheck)
	var column_1 int32
	err := row.Scan(&column_1)
	return column_1, err
}

const moveToFolder = `-- name: MoveToFolder :exec
UPDATE elements SET parent = ? WHERE id = ? and user_id_fk = ?
`

type MoveToFolderParams struct {
	Parent   sql.NullString
	ID       string
	UserIDFk sql.NullString
}

func (q *Queries) MoveToFolder(ctx context.Context, arg MoveToFolderParams) error {
	_, err := q.db.ExecContext(ctx, moveToFolder, arg.Parent, arg.ID, arg.UserIDFk)
	return err
}

const saveAddress = `-- name: SaveAddress :exec
REPLACE INTO address(
        id,
        street,
        house_number,
        location,
        postal_code,
        country
) VALUES (
        ?, ?, ?, ?, ?, ?
)
`

type SaveAddressParams struct {
	ID          string
	Street      string
	HouseNumber string
	Location    string
	PostalCode  string
	Country     string
}

func (q *Queries) SaveAddress(ctx context.Context, arg SaveAddressParams) error {
	_, err := q.db.ExecContext(ctx, saveAddress,
		arg.ID,
		arg.Street,
		arg.HouseNumber,
		arg.Location,
		arg.PostalCode,
		arg.Country,
	)
	return err
}

const saveClub = `-- name: SaveClub :exec
REPLACE INTO clubs(
        id,
        name,
        address_id
) VALUES(
        ?,
        ?,
        ?
)
`

type SaveClubParams struct {
	ID        string
	Name      string
	AddressID string
}

func (q *Queries) SaveClub(ctx context.Context, arg SaveClubParams) error {
	_, err := q.db.ExecContext(ctx, saveClub, arg.ID, arg.Name, arg.AddressID)
	return err
}

const searchByFolderName = `-- name: SearchByFolderName :many
SELECT type, id, creation_date, description, name, number_of_pages, user_id_fk, parent, author_id_fk, pdf_content FROM elements WHERE name LIKE CONCAT('%', ?, '%') and type = 'folder' AND user_id_fk = ? ORDER BY name LIMIT ? OFFSET ?
`

type SearchByFolderNameParams struct {
	CONCAT   interface{}
	UserIDFk sql.NullString
	Limit    int32
	Offset   int32
}

func (q *Queries) SearchByFolderName(ctx context.Context, arg SearchByFolderNameParams) ([]Element, error) {
	rows, err := q.db.QueryContext(ctx, searchByFolderName,
		arg.CONCAT,
		arg.UserIDFk,
		arg.Limit,
		arg.Offset,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Element
	for rows.Next() {
		var i Element
		if err := rows.Scan(
			&i.Type,
			&i.ID,
			&i.CreationDate,
			&i.Description,
			&i.Name,
			&i.NumberOfPages,
			&i.UserIDFk,
			&i.Parent,
			&i.AuthorIDFk,
			&i.PdfContent,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthor = `-- name: UpdateAuthor :exec
UPDATE authors SET name = ?, extra_information = ? WHERE id = ? AND user_id_fk = ?
`

type UpdateAuthorParams struct {
	Name             sql.NullString
	ExtraInformation sql.NullString
	ID               string
	UserIDFk         sql.NullString
}

func (q *Queries) UpdateAuthor(ctx context.Context, arg UpdateAuthorParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthor,
		arg.Name,
		arg.ExtraInformation,
		arg.ID,
		arg.UserIDFk,
	)
	return err
}

const updateFolder = `-- name: UpdateFolder :exec
UPDATE elements SET name=?, description = ?, parent = ? WHERE id = ? and user_id_fk = ?
`

type UpdateFolderParams struct {
	Name        sql.NullString
	Description sql.NullString
	Parent      sql.NullString
	ID          string
	UserIDFk    sql.NullString
}

func (q *Queries) UpdateFolder(ctx context.Context, arg UpdateFolderParams) error {
	_, err := q.db.ExecContext(ctx, updateFolder,
		arg.Name,
		arg.Description,
		arg.Parent,
		arg.ID,
		arg.UserIDFk,
	)
	return err
}

const updateIcalSync = `-- name: UpdateIcalSync :exec
UPDATE ical_sync SET ical_url = ?, last_synced = ? WHERE id = ? AND user_id_fk = ?
`

type UpdateIcalSyncParams struct {
	IcalUrl    string
	LastSynced sql.NullTime
	ID         string
	UserIDFk   string
}

func (q *Queries) UpdateIcalSync(ctx context.Context, arg UpdateIcalSyncParams) error {
	_, err := q.db.ExecContext(ctx, updateIcalSync,
		arg.IcalUrl,
		arg.LastSynced,
		arg.ID,
		arg.UserIDFk,
	)
	return err
}

const updateIcalSyncByTypeAndUser = `-- name: UpdateIcalSyncByTypeAndUser :exec
UPDATE ical_sync SET ical_url = ?, last_synced = ? WHERE type = ? AND user_id_fk = ?
`

type UpdateIcalSyncByTypeAndUserParams struct {
	IcalUrl    string
	LastSynced sql.NullTime
	Type       string
	UserIDFk   string
}

func (q *Queries) UpdateIcalSyncByTypeAndUser(ctx context.Context, arg UpdateIcalSyncByTypeAndUserParams) error {
	_, err := q.db.ExecContext(ctx, updateIcalSyncByTypeAndUser,
		arg.IcalUrl,
		arg.LastSynced,
		arg.Type,
		arg.UserIDFk,
	)
	return err
}

const updateLastSyncOfIcal = `-- name: UpdateLastSyncOfIcal :exec
UPDATE ical_sync SET last_synced = ? WHERE id = ?
`

type UpdateLastSyncOfIcalParams struct {
	LastSynced sql.NullTime
	ID         string
}

func (q *Queries) UpdateLastSyncOfIcal(ctx context.Context, arg UpdateLastSyncOfIcalParams) error {
	_, err := q.db.ExecContext(ctx, updateLastSyncOfIcal, arg.LastSynced, arg.ID)
	return err
}

const updateNote = `-- name: UpdateNote :exec
UPDATE elements SET name = ?, description = ?, author_id_fk = ?, number_of_pages = ?, pdf_content = ? WHERE id = ?
`

type UpdateNoteParams struct {
	Name          sql.NullString
	Description   sql.NullString
	AuthorIDFk    sql.NullString
	NumberOfPages sql.NullInt32
	PdfContent    sql.NullString
	ID            string
}

func (q *Queries) UpdateNote(ctx context.Context, arg UpdateNoteParams) error {
	_, err := q.db.ExecContext(ctx, updateNote,
		arg.Name,
		arg.Description,
		arg.AuthorIDFk,
		arg.NumberOfPages,
		arg.PdfContent,
		arg.ID,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE user SET username = ?, side_bar_collapsed = ?, email = ?, firstname = ?, lastname = ?, telephoneNumber = ?  WHERE id = ?
`

type UpdateUserParams struct {
	Username         sql.NullString
	SideBarCollapsed bool
	Email            sql.NullString
	Firstname        sql.NullString
	Lastname         sql.NullString
	Telephonenumber  sql.NullString
	ID               string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Username,
		arg.SideBarCollapsed,
		arg.Email,
		arg.Firstname,
		arg.Lastname,
		arg.Telephonenumber,
		arg.ID,
	)
	return err
}

const updateUserProfilePicture = `-- name: UpdateUserProfilePicture :exec
UPDATE user SET profile_picture = ? WHERE id = ?
`

type UpdateUserProfilePictureParams struct {
	ProfilePicture sql.NullString
	ID             string
}

func (q *Queries) UpdateUserProfilePicture(ctx context.Context, arg UpdateUserProfilePictureParams) error {
	_, err := q.db.ExecContext(ctx, updateUserProfilePicture, arg.ProfilePicture, arg.ID)
	return err
}
